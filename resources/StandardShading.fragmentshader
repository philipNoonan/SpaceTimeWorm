#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 Normal_worldspace;

// Ouput data
layout(location = 0) out vec4 color;
layout(location = 1) out vec4 depthVerts;
layout(location = 2) out vec4 normVerts;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;

void main(){

	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 1.0f;
	
	// Material properties
	//vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;
	//vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(1.0,1.0,1.0);

	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendiular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	
	depthVerts = vec4(Position_worldspace.x, Position_worldspace.y, -Position_worldspace.z, 1.0f);
	float vectorLength = length(Normal_worldspace);
	// possibly to get normals out, we need to set the w to 1.0f, since it is the Alpha channel
	normVerts = vec4(-Normal_worldspace.x/vectorLength, -Normal_worldspace.y/vectorLength, Normal_worldspace.z/vectorLength, 1.0f);
	//vec3 normNorm = normalize(Normal_worldspace);
	//normVerts = vec4(-normNorm.x, -normNorm.y, normNorm.z, 1.0f);

	//depthVerts = vec4(1.0f, 1.0f, 1.0f, 1.0f);

	//color = vec4(-Position_worldspace.z/ (1000.0f*0.75f),-Position_worldspace.z/ (1000.0f*0.75f),-Position_worldspace.z / (1000.0f*0.75f), 0.7f);
	color =
		// Ambient : simulates indirect lighting
		//MaterialAmbientColor +
		// Diffuse : "color" of the object
		//MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
		// Specular : reflective highlight, like a mirror
		vec4((MaterialSpecularColor * LightColor * LightPower * cosTheta), 1.0f);

}